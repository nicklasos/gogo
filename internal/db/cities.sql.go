// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cities.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCityByID = `-- name: GetCityByID :one
SELECT id, name, created_at, updated_at, lat, lon, available_modules FROM cities 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCityByID(ctx context.Context, id int32) (City, error) {
	row := q.db.QueryRow(ctx, getCityByID, id)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Lat,
		&i.Lon,
		&i.AvailableModules,
	)
	return i, err
}

const getCityByName = `-- name: GetCityByName :one
SELECT id, name, created_at, updated_at, lat, lon, available_modules FROM cities 
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCityByName(ctx context.Context, name string) (City, error) {
	row := q.db.QueryRow(ctx, getCityByName, name)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Lat,
		&i.Lon,
		&i.AvailableModules,
	)
	return i, err
}

const listCities = `-- name: ListCities :many
SELECT id, name, created_at, updated_at, lat, lon, available_modules FROM cities 
ORDER BY name ASC
`

func (q *Queries) ListCities(ctx context.Context) ([]City, error) {
	rows, err := q.db.Query(ctx, listCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Lat,
			&i.Lon,
			&i.AvailableModules,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCityLatLon = `-- name: UpdateCityLatLon :exec
UPDATE cities 
SET lat = $2, lon = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateCityLatLonParams struct {
	ID  int32          `db:"id" json:"id"`
	Lat pgtype.Numeric `db:"lat" json:"lat"`
	Lon pgtype.Numeric `db:"lon" json:"lon"`
}

func (q *Queries) UpdateCityLatLon(ctx context.Context, arg UpdateCityLatLonParams) error {
	_, err := q.db.Exec(ctx, updateCityLatLon, arg.ID, arg.Lat, arg.Lon)
	return err
}
